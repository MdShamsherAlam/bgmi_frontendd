<html>
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        body {
            background-color: #fdf2e9;
        }
        .table-header {
            background-color: #f8f9fa;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            padding: 20px;
        }
        .table-header h5 {
            margin: 0;
        }
        .table-header small {
            color: #6c757d;
        }
        .table {
            margin-bottom: 0;
        }
        .table th {
            background-color: #f0f0ff;
            border-top: none;
        }
        .table td {
            vertical-align: middle;
        }
        .status-completed {
            color: green;
        }
        .status-pending {
            color: orange;
        }
        .amount-up {
            color: #00bcd4;
        }
        .amount-down {
            color: #e91e63;
        }
        .view-all {
            background-color: #f8f9fa;
            border-bottom-left-radius: 10px;
            border-bottom-right-radius: 10px;
            text-align: right;
            padding: 10px 20px;
        }
        .view-all a {
            color: #6c757d;
            text-decoration: none;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="table-header">
            <h5>Latest Transactions</h5>
            <small id="pending-count">Loading...</small>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th>TRANSACTION ID</th>
                    <th>DATE</th>
                    <th>NAME</th>
                    <th>AMOUNT</th>
                    <th>STATUS</th>
                </tr>
            </thead>
            <tbody id="transaction-body">
                <!-- Data will be populated dynamically -->
            </tbody>
        </table>
        <div class="view-all">
            <a href="#">View All Transactions</a>
        </div>
    </div>
<!-- 
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const apiBaseUrl = "http://localhost:5000/v1/auth/history"; // Replace with your API endpoint
            const transactionBody = document.getElementById("transaction-body");
            const pendingCount = document.getElementById("pending-count");

            // Fetch the transaction data
            fetch(apiBaseUrl)
                .then(response => response.json())
                .then(data => {
                    if (data.status === "success") {
                        console.log(data)
                        populateTransactions(data.transactions);
                        updatePendingCount(data.transactions);
                    } else {
                        alert("Failed to fetch transactions: " + data.message);
                    }
                })
                .catch(error => {
                    console.error("Error fetching transactions:", error);
                    alert("An error occurred while fetching transactions.");
                });

            // Populate the transaction table
            function populateTransactions(transactions) {
                transactionBody.innerHTML = ""; // Clear any existing data
                transactions.forEach(transaction => {
                    const row = document.createElement("tr");

                    row.innerHTML = `
                        <td>${transaction.id}</td>
                        <td>${formatDate(transaction.date)}</td>
                        <td>${transaction.name}</td>
                        <td class="${transaction.amount > 0 ? 'amount-up' : 'amount-down'}">
                            <i class="fas fa-arrow-${transaction.amount > 0 ? 'up' : 'down'}"></i> $${Math.abs(transaction.amount)}
                        </td>
                        <td class="${transaction.status === 'completed' ? 'status-completed' : 'status-pending'}">
                            ${capitalize(transaction.status)}
                        </td>
                    `;
                    transactionBody.appendChild(row);
                });
            }

            // Update the pending transactions count
            function updatePendingCount(transactions) {
                const pending = transactions.filter(tx => tx.status === "pending").length;
                pendingCount.textContent = `${pending} Pending`;
            }

            // Format the date to a readable format
            function formatDate(dateString) {
                const options = { year: 'numeric', month: 'short', day: 'numeric' };
                return new Date(dateString).toLocaleDateString(undefined, options);
            }

            // Capitalize the first letter of a word
            function capitalize(word) {
                return word.charAt(0).toUpperCase() + word.slice(1);
            }
        });
    </script> -->
    <script src="js/jquery-.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <script src="js/anim.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
          const apiBaseUrl = "http://localhost:5000/";
         
       // Function to get a cookie value by name
function getCookie(name) {
    const cookies = document.cookie.split('; ');
    for (let cookie of cookies) {
        const [key, value] = cookie.split('=');
        if (key === name) {
            return value;
        }
    }
    return null;
}

// Retrieve the token from cookies
const token = getCookie("access-token");

if (!token) {
    alert("You need to be logged in to book a slot.");

    // Optionally redirect to login page
    window.location.href = "/login"; // Replace "/login" with your login page URL
    return;
}

// Token exists, proceed with booking
console.log("Token found in cookies:", token);

// Add logic for booking a slot here

          const transactionBody = document.getElementById("transaction-body");
            const pendingCount = document.getElementById("pending-count");

              const historyData = { transactionBody, pendingCount };
      
              fetch(apiBaseUrl + "v1/auth/history", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(historyData),
              })
                .then((response) => response.json())
                .then(data => {
                    if (data.status === "success") {
                        console.log(data.data.data)
                        populateTransactions(data.data.data);
                        updatePendingCount(data.data.data);
                    } else {
                        alert("Failed to fetch transactions: " + data.message);
                    }
                })
                .catch(error => {
                    console.error("Error fetching transactions:", error);
                    alert("An error occurred while fetching transactions.");
                });
                
                function populateTransactions(transactions) {
                transactionBody.innerHTML = "";
                transactions.forEach(transaction => {
                    const row = document.createElement("tr");

                    row.innerHTML = `
                        <td>${transaction.id}</td>
                        <td>${formatDate(transaction.date)}</td>
                        <td>${transaction.name}</td>
                        <td class="${transaction.amount > 0 ? 'amount-up' : 'amount-down'}">
                            <i class="fas fa-arrow-${transaction.amount > 0 ? 'up' : 'down'}"></i> $${Math.abs(transaction.amount)}
                        </td>
                        <td class="${transaction.status === 'completed' ? 'status-completed' : 'status-pending'}">
                            ${capitalize(transaction.status)}
                        </td>
                    `;
                    transactionBody.appendChild(row);
                });
            }

            // Update the pending transactions count
            function updatePendingCount(transactions) {
                const pending = transactions.filter(tx => tx.status === "pending").length;
                pendingCount.textContent = `${pending} Pending`;
            }

            // Format the date to a readable format
            function formatDate(dateString) {
                const options = { year: 'numeric', month: 'short', day: 'numeric' };
                return new Date(dateString).toLocaleDateString(undefined, options);
            }

            // Capitalize the first letter of a word
            function capitalize(word) {
                return word.charAt(0).toUpperCase() + word.slice(1);
            }
        });
            
      
      
      </script>
      
</body>
</html>
